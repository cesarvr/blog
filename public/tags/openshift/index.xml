<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Openshift on Shipwreck</title>
    <link>/tags/openshift/</link>
    <description>Recent content in Openshift on Shipwreck</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/openshift/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating Your Own Istio (Part 2.5)</title>
      <link>/post/istio-2.5/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/istio-2.5/</guid>
      <description>&lt;p&gt;In the last post we create our first &lt;a href=&#34;https://cesarvr.io/post/istio-2/&#34;&gt;container decorator&lt;/a&gt;, a container that when included into an arbitrary pod enhance the main container. In our particular case we created a container that override the HTTP 404 responses as an introduction, in this post we are going to build upon and develop some functionalities to monitor the performance of a running service.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating Your Own Istio (Part 2)</title>
      <link>/post/istio-2/</link>
      <pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/istio-2/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s talk about container oriented programming&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating Your Own Istio (Part 1)</title>
      <link>/post/istio/</link>
      <pubDate>Wed, 19 Sep 2018 14:30:07 +0100</pubDate>
      
      <guid>/post/istio/</guid>
      <description>&lt;p&gt;Let say we have a micro-service exposing some business API and we want to gather some data about its usage, such as how many calls, payload size, errors, response time, etc. Adding this feature would usually involve writing some code, testing and the re-deployment of a new version. But when you have multiple micro-services, this solution can be difficult to reuse.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chaining Builds In Openshift</title>
      <link>/post/ocp-chainbuild/</link>
      <pubDate>Sat, 21 Jul 2018 11:18:43 +0200</pubDate>
      
      <guid>/post/ocp-chainbuild/</guid>
      <description>New application Creating a Node.js application in Openshift is simple:
oc login -u user oc new-project hello # Assuming you are logged and you have a project you can start here. oc new-app --name node-app nodejs~https://github.com/cesarvr/hello-world-nodejs #new app using nodejs:latest (Node.js 8)  This command will create the backbone (BuildConfig, DeploymentConfig and Service) to orchestrate the different stages from source code to a running application.
The size problem But this nice abstraction come with a cost, to explain what I mean, let&amp;rsquo;s review size of our final image using du:</description>
    </item>
    
  </channel>
</rss>