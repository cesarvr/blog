<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenShift on Cesar&#39;s Bitacora</title>
    <link>https://cesarvr.io/categories/openshift/</link>
    <description>Recent content in OpenShift on Cesar&#39;s Bitacora</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Jan 2020 19:24:19 +0100</lastBuildDate>
    
	<atom:link href="https://cesarvr.io/categories/openshift/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Performance Showdown: Rust vs Javascript</title>
      <link>https://cesarvr.io/post/rust-performance/</link>
      <pubDate>Wed, 01 Jan 2020 19:24:19 +0100</pubDate>
      
      <guid>https://cesarvr.io/post/rust-performance/</guid>
      <description>After spending some weeks playing with Rust, I felt ready to test my skills and try some programming challenges in the Advent Of Code. My approach to tackle some of those challenges was to solve them on Javascript first (I use it in my day to day) to then port the code to Rust, while porting I just focus on getting the Rust code as elegant as possible. It was after finishing porting this puzzle in particular and feeling a sense of accomplishment that I decided to test how the Rust compiled code will perform against Javascript interpreter.</description>
    </item>
    
    <item>
      <title>Creating Your Own Istio (Part 3) - Dashboard</title>
      <link>https://cesarvr.io/post/istio-4/</link>
      <pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cesarvr.io/post/istio-4/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;https://cesarvr.io/post/istio-2.5/&#34;&gt;the previous post&lt;/a&gt; we where able to collect information about pods running in our cluster thanks to the deployment of our &lt;a href=&#34;https://github.com/cesarvr/ambassador&#34;&gt;Ambassador container&lt;/a&gt;, but having this information is of little value if we don&#39;t have a way to make sense of it. In this post we are going to develop a new functionality in our Ambassador so we can publish this information into a service.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating Your Own Istio (Part 2.5)</title>
      <link>https://cesarvr.io/post/istio-2.5/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cesarvr.io/post/istio-2.5/</guid>
      <description>&lt;p&gt;In the last post we create our first &lt;a href=&#34;https://cesarvr.io/post/istio-2/&#34;&gt;container decorator&lt;/a&gt;, a container that when included into an arbitrary pod enhance the main container. In our particular case we created a container that override the HTTP 404 responses as an introduction, in this post we are going to build upon and develop some functionalities to monitor the performance of a running service.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating Your Own Istio (Part 2)</title>
      <link>https://cesarvr.io/post/istio-2/</link>
      <pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cesarvr.io/post/istio-2/</guid>
      <description>&lt;p&gt;Let&#39;s talk about container oriented programming&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating Your Own Istio (Part 1)</title>
      <link>https://cesarvr.io/post/istio/</link>
      <pubDate>Wed, 19 Sep 2018 14:30:07 +0100</pubDate>
      
      <guid>https://cesarvr.io/post/istio/</guid>
      <description>&lt;p&gt;Let say we have a micro-service exposing some business API and we want to gather some data about its usage, such as how many calls, payload size, errors, response time, etc. Adding this feature would usually involve writing some code, testing and the re-deployment of a new version. But when you have multiple micro-services, this solution can be difficult to reuse.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>4 Ways to Build Applications in OpenShift</title>
      <link>https://cesarvr.io/post/buildconfig/</link>
      <pubDate>Sat, 28 Jul 2018 19:24:19 +0100</pubDate>
      
      <guid>https://cesarvr.io/post/buildconfig/</guid>
      <description>&lt;p&gt;We are going to discuss the different strategies for building our software in OpenShift. These strategies are useful if you need to solve any of the following problems:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exporting external images to Openshift</title>
      <link>https://cesarvr.io/post/2017-11-12-imagestream/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cesarvr.io/post/2017-11-12-imagestream/</guid>
      <description>Getting Started First you need to have an Openshift installation on the cloud or in your machine, the second option is the easiest one thanks to the oc cluster up command, this will create a small local installation of openshift in your machine, if your are not familiar take a quick look at the documentation.
Creating a project Once oc cluster up finish you should have an Openshift installation up and ready in your local machine, now next step is to login in and create a project.</description>
    </item>
    
  </channel>
</rss>